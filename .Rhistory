result <- list(anova=fit, summarystats=stats)
return(result)
}
x <- oneway(mpg ~ cyl, mtcars)
x
x <- oneway(mpg ~ cyl, mtcars)
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
# delete missing data
data <- na.omit(data)
#anova
fit <- lm(formula, data)
# summary statistics
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
# return results
result <- list(anova=fit, summarystats=stats)
class(result) <- "oneway"
return(result)
}
x <- oneway(mpg ~ cyl, mtcars)
x
oneway
x
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
# delete missing data
data <- na.omit(data)
#anova
fit <- lm(formula, data)
# summary statistics for each level of grouping variable
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
# return results
result <- list(anova=fit, summarystats=stats)
class(result) <- "oneway"
return(result)
}
usethis::use_mit_license(name="Blake Northrop")
library(oneway)
rm(oneway)
library(oneway)
?oneway''
?oneway
use_readme_me()
use_readme_md()
check_rtools(debug=TRUE)
library(usethis)
use_readme_md()
library(pkgdown)
install.pacckages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
library(oneway)
?oneway
library(oneway)
?oneway
fit <- oneway(mpg ~ cyl, mtcars)
names(fit)
fit$anova
summary(fit$anova)
fit$summarystats
class(fit)
fit
# Create print function for objects of class "oneway"
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats, ...))
cat("Anova",
print(summary.lm(x$anova)))
}
library(oneway)
?print.oneway
mileage <- oneway(mpg ~ cyl, mtcars)
print(mileage)
mileage$summarystats
class(mileage$summarystats)
class(summary.lm(mileage$anova))
?cat
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics")
#     ,
#     print(x$summarystats, ...))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats, ...))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics")
print(x$summarystats, ...)
cat("Anova")
print(summary.lm(x$anova))
}
print.oneway(mileage)
library(oneway)
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n")
print(x$summarystats, ...)
cat("Anova\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("Anova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\n Anova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class oneway")
}
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mtcars)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
library(oneway)
mileage
mileage
View(mileage)
mileage$anova
names(mileage$anova)
mileage$anova$terms
boxplot(mileage$anova$terms, mileage$anova$model)
# Create function for building boxplot
plot.oneway <- function(x, ...) {
# Make sure object is of correct class
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
boxplot(x$anova$terms, x$anova$model, ...)
}
plot(mileage)
?print.oneway
#'
#' plot.oneway creates group comparisons for a one-way ANOVA.
#'
#' @param x an object of class 'oneway'.
#' @param ... additional arguments passed to boxplot function.
#' @export
#' @return NULL
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' plot(mileage)
plot.oneway <- function(x, ...) {
# Make sure object is of correct class
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
boxplot(x$anova$terms, x$anova$model, ...)
}
library(oneway)
plot(mileage)
mileage$anova
anova(mileage$anova)
summary.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")}
anova(x$anova)
}
library(oneway)
summary(mileage)
library(oneway)
?summary.oneway
library(pkgdown)
build_site()
git add .
build_site()
library(oneway)
library(oneway)
library(oneway)
build_site()
library(oneway)
getwd()
build_site()
library(oneway)
library(pkgdown)
build_site()
library(testthat)
library(usethis)
use_vignette("oneway")
build_site()
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
View(cars)
use_data(cars)
library(oneway)
?cars
build_site(0)
build_site()
fit <- oneway(mpg ~ carb, mtcars)
fit
mtcars %>% group_by(cyl) %>% summarise()
library(dplyr)
mtcars %>% group_by(cyl) %>% summarise()
mtcars %>% group_by(cyl) %>% summarise(mpg)
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(mpg, cyl)
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise()
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(mpg)
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
count(mpg)
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=count(mpg), mean=mean(mpg), sd = sd(mpg))
library(dplyr)
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=count(mpg), mean=mean(mpg), sd = sd(mpg))
mtcars %>%
# select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=count(mpg), mean=mean(mpg), sd = sd(mpg))
mtcars %>%
select(cyl, mpg) %>%
#  group_by(cyl) %>%
summarise(n=count(mpg), mean=mean(mpg), sd = sd(mpg))
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=count(), mean=mean(), sd = sd())
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=n(mpg), mean=mean(mpg), sd = sd(mpg))
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(mean=mean(mpg), sd = sd(mpg))
mtcars %>%
select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(n=count(cyl), mean=mean(mpg), sd = sd(mpg))
mtcars %>%
#  select(cyl, mpg) %>%
group_by(cyl) %>%
summarise(mean=mean(mpg), sd = sd(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(n = n(), mean=mean(mpg), sd = sd(mpg))
# Put this inside a function
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by({{group}}) %>%
summarise(n = n(),
mean=mean({{y}}),
sd = sd({{y}}))
}
mystats(mtcars, g="cyl", y="mpg")
# Put this inside a function
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]]))
}
mystats(mtcars, g="cyl", y="mpg")
# Put this inside a function - USE .data[[x]] for dplyr/ggplot inside function!
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mtcars, g="cyl", y="mpg")
# Put this inside a function - USE .data[[x]] for dplyr/ggplot inside function!
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame(, row.name=F)
}
mystats(mtcars, g="cyl", y="mpg")
# Put this inside a function - USE .data[[x]] for dplyr/ggplot inside function!
mystats <- function(data, group, y) {
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mtcars, g="cyl", y="mpg")
# Now
mystats <- function(data, group, y) {
require(dplyr)
group <- enquo(group)
y <- enquo(y)
data %>%
group_by(!!group) %>%
summarise(n = n(),
mean=mean(!!y),
sd = sd(!!y)) %>%
as.data.frame()
}
mystats(mtcars, g=cyl, y=mpg)
# Now argument is a formula and data set
mystats3 <- function(formula, data) {
require(dplyr)
group <- as.character(formula[[3]])
y <- as.character(formula[[2]])
data %>%
group_by(group) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats3(mpg ~ cyl, mtcars)
# Now argument is a formula and data set
mystats3 <- function(formula, data) {
require(dplyr)
group <- as.character(formula[[3]])
y <- as.character(formula[[2]])
data %>%
group_by(.data[[group]]) %>%
summarise(n = n(),
mean=mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats3(mpg ~ cyl, mtcars)
library(oneway)
fit <- oneway(mpg ~cyl, mtcars)
fit
library(crayon)
red$bold$underline("Summary Statistics")
library(oneway)
fit
library(oneway)
fit
library(oneway)
fit
