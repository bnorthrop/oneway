data(mtcars)
force(mtcars)
View(mtcars)
table(mtcars$cyl)
stats <- function(x) {
c(n = length(x), mean = mean(x), sd = sd(x))
}
stats(mtcars$mpg)
?by
by(mtcars$cyl)
by(mtcars, cyl)
by(mtcars, mtcars$cyl)
by(mtcars, mtcars$cyl, c(length(), mean(), sd()))
stats2 <- function(x) {
for(i in mtcars$cyl) {
c(n = length(x), mean = mean(x), sd = sd(x))
}
}
stats2(mtcars$cyl)
by(mtcars, mtcars$cyl, mean())
by(mtcars, mtcars$cyl, FUN=mean())
by(mtcars$cyl, mtcars$cyl, FUN=mean())
by(mtcars, mtcars$cyl, FUN=summary)
by(mtcars, mtcars$cyl, c(length, mean))
by(mtcars, mtcars$cyl, FUN=c(length, mean))
by(mtcars, mtcars$cyl, FUN=mean)
by(mtcars, mtcars$cyl, summary)
stats <- function(x) {
c(n = length(x), mean = mean(x), sd = sd(x))
}
stats(mtcars$mpg)
by(mtcars, mtcars$mpg, summary)
by(mtcars$cyl, mtcars$mpg, summary)
by(mtcars$mpg, mtcars$cyl, summary)
stats(mtcars$mpg)
by(mtcars$mpg, mtcars$cyl, mean)
by(mtcars$mpg, mtcars$cyl, length)
by(mtcars$mpg, mtcars$cyl, sd)
by(mtcars$mpg, mtcars$cyl, mean, sd)
by(mtcars$mpg, mtcars$cyl, c("length", "mean", "sd"))
by(mtcars$mpg, mtcars$cyl, mean)
by(mtcars$mpg, mtcars$cyl, stats)
result <- by(mtcars$mpg, mtcars$cyl, stats)
result
class(result)
as.data.frame(result)
aggregate(mpg~cyl, mtcars, stats)
result2 <- aggregate(mpg~cyl, mtcars, stats)
class(result2)
tablefnct <- function(x) {
c(n = length(x), mean = mean(x), sd = sd(x))
#c(value = length(), count = count(), proportion = sd())
}
aggregate(mpg~cyl, mtcars, tablefnct())
aggregate(mpg~cyl, mtcars, tablefnct
aggregate(mpg~cyl, mtcars, tablefnct)
tablefnct <- function(x) {
c(n = length(x), mean = mean(x), sd = sd(x))
#c(value = length(), count = count(), proportion = sd())
}
aggregate(mpg~cyl, mtcars, tablefnct)
tablefnct <- function(x) {
c(value = length(x), count = count(x), proportion = sd(x))
}
aggregate(mpg~cyl, mtcars, tablefnct)
c(value = length(x), count = n(x), proportion = sd(x))
tablefnct <- function(x) {
c(value = length(x), count = n(x), proportion = sd(x))
}
aggregate(mpg~cyl, mtcars, tablefnct)
tablefnct <- function(data, x) {
c(value = length(x), count = n(data, x), proportion = sd(x))
}
aggregate(mpg~cyl, mtcars, tablefnct)
tablefnct <- function(x) {
c(value = length(x), count = mean(x), proportion = sd(x))
}
aggregate(mpg~cyl, mtcars, tablefnct)
tablefnct(mtcars$cyl)
tablefnct <- function(x) {
c(value = length(x), count = mean(x), proportion = sd(x))
}
for (i in names(mtcars)) {
tablefnct(i)
}
for (i in names(mtcars)) {
aggregate(mpg~i, mtcars, tablefnct)
}
for (i in names(mtcars)) {
by(mtcars$i, mtcars$i, tablefnct)
}
for (i in names(mtcars)) {
result3 <- by(mtcars$i, mtcars$i, tablefnct)
return(result3)
}
for (i in names(mtcars)) {
result3 <- by(mtcars$i, mtcars$i, tablefnct)
return()
}
data(mtcars)
table(mtcars$cyl)
stats <- function(x) {
c(n = length(x), mean = mean(x), sd = sd(x))
}
stats(mtcars$mpg)
# Saves as class = "by" which is good for visualizing, but not working with after
result <- by(mtcars$mpg, mtcars$cyl, stats)
# Saves as data frame, much easier to work with
result2 <- aggregate(mpg~cyl, mtcars, stats)
tablefnct <- function(x) {
c(value = length(x), count = mean(x), proportion = sd(x))
}
for (i in names(mtcars)) {
aggregate(mpg~i, mtcars, tablefnct)
}
aggregate(mpg~cyl, mtcars, stats)
by(mtcars$mpg, mtcars$cyl, stats)
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
#anova
fit <- lm(formula, data)
}
oneway(mpg~cyl, mtcars)
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
#anova
fit <- lm(formula, data)
return(fit)
}
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
#anova
fit <- lm(formula, data)
return(fit)
}
oneway(mpg ~ cyl, mtcars)
x <- oneway(mpg ~ cyl, mtcars)
aggregate(mpg ~ cyl, mtcars, function(x) c(n=length(x), mean = mean(x), sd=sd(x)))
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
#anova
fit <- lm(formula, data)
# summary statistics
stats <- aggregate(formula, data,
function(x) c(n=length(x), mean = mean(x), sd=sd(x)))
return(fit)
}
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
#anova
fit <- lm(formula, data)
# summary statistics
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
result <- list(anova=fit, summarystats=stats)
return(result)
}
oneway(mpg ~ cyl, mtcars)
x <- oneway(mpg ~ cyl, mtcars)
class(x)
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
# delete missing data
data <- na.omit(data)
#anova
fit <- lm(formula, data)
# summary statistics
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
# return results
result <- list(anova=fit, summarystats=stats)
return(result)
}
x <- oneway(mpg ~ cyl, mtcars)
x
x <- oneway(mpg ~ cyl, mtcars)
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
# delete missing data
data <- na.omit(data)
#anova
fit <- lm(formula, data)
# summary statistics
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
# return results
result <- list(anova=fit, summarystats=stats)
class(result) <- "oneway"
return(result)
}
x <- oneway(mpg ~ cyl, mtcars)
x
oneway
x
# We choose the first way from line 2
oneway <- function(formula, data, ...) {
# delete missing data
data <- na.omit(data)
#anova
fit <- lm(formula, data)
# summary statistics for each level of grouping variable
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean = mean(x),
sd=sd(x)))
# return results
result <- list(anova=fit, summarystats=stats)
class(result) <- "oneway"
return(result)
}
usethis::use_mit_license(name="Blake Northrop")
library(oneway)
rm(oneway)
library(oneway)
?oneway''
?oneway
use_readme_me()
use_readme_md()
check_rtools(debug=TRUE)
library(usethis)
use_readme_md()
library(pkgdown)
install.pacckages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
library(oneway)
?oneway
library(oneway)
?oneway
fit <- oneway(mpg ~ cyl, mtcars)
names(fit)
fit$anova
summary(fit$anova)
fit$summarystats
class(fit)
fit
# Create print function for objects of class "oneway"
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats, ...))
cat("Anova",
print(summary.lm(x$anova)))
}
library(oneway)
?print.oneway
mileage <- oneway(mpg ~ cyl, mtcars)
print(mileage)
mileage$summarystats
class(mileage$summarystats)
class(summary.lm(mileage$anova))
?cat
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics")
#     ,
#     print(x$summarystats, ...))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats, ...))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics",
print(x$summarystats))
# cat("Anova",
#     print(summary.lm(x$anova)))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics")
print(x$summarystats, ...)
cat("Anova")
print(summary.lm(x$anova))
}
print.oneway(mileage)
library(oneway)
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n")
print(x$summarystats, ...)
cat("Anova\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("Anova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\n Anova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class oneway")
}
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
print.oneway(mtcars)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @export
#'
#' @return the input object is returned silently
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
cat("Summary Statistics\n",
"=====================\n")
print(x$summarystats, ...)
cat("\nAnova\n",
"=====================\n")
print(summary.lm(x$anova))
}
library(oneway)
mileage
mileage
View(mileage)
mileage$anova
names(mileage$anova)
mileage$anova$terms
boxplot(mileage$anova$terms, mileage$anova$model)
# Create function for building boxplot
plot.oneway <- function(x, ...) {
# Make sure object is of correct class
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
boxplot(x$anova$terms, x$anova$model, ...)
}
plot(mileage)
?print.oneway
#'
#' plot.oneway creates group comparisons for a one-way ANOVA.
#'
#' @param x an object of class 'oneway'.
#' @param ... additional arguments passed to boxplot function.
#' @export
#' @return NULL
#' @examples
#' # mileage <- oneway(mpg ~ cyl, mtcars)
#' plot(mileage)
plot.oneway <- function(x, ...) {
# Make sure object is of correct class
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")
}
boxplot(x$anova$terms, x$anova$model, ...)
}
library(oneway)
plot(mileage)
mileage$anova
anova(mileage$anova)
summary.oneway <- function(x, ...) {
if(!inherits(x, "oneway")){
stop("Must be class 'oneway'")}
anova(x$anova)
}
library(oneway)
summary(mileage)
library(oneway)
?summary.oneway
library(pkgdown)
build_site()
git add .
build_site()
library(oneway)
library(oneway)
library(oneway)
build_site()
library(oneway)
getwd()
build_site()
